/*
 * Generated by gdbus-codegen 2.32.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __SSO_AUTH_SERVICE_GEN_H__
#define __SSO_AUTH_SERVICE_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.google.code.AccountsSSO.gSingleSignOn.AuthService */

#define TYPE_SSO_AUTH_SERVICE (sso_auth_service_get_type ())
#define SSO_AUTH_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SSO_AUTH_SERVICE, SsoAuthService))
#define IS_SSO_AUTH_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SSO_AUTH_SERVICE))
#define SSO_AUTH_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_SSO_AUTH_SERVICE, SsoAuthServiceIface))

struct _SsoAuthService;
typedef struct _SsoAuthService SsoAuthService;
typedef struct _SsoAuthServiceIface SsoAuthServiceIface;

struct _SsoAuthServiceIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_backup_finished) (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_backup_starts) (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_clear) (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_identity) (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation,
    guint arg_id,
    const gchar *arg_applicationContext);

  gboolean (*handle_query_identities) (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_filter,
    const gchar *arg_applicationContext);

  gboolean (*handle_query_mechanisms) (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_method);

  gboolean (*handle_query_methods) (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_register_new_identity) (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_applicationContext);

  gboolean (*handle_restore_finished) (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_restore_starts) (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation);

};

GType sso_auth_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *sso_auth_service_interface_info (void);
guint sso_auth_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void sso_auth_service_complete_register_new_identity (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation,
    const gchar *objectPath);

void sso_auth_service_complete_get_identity (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation,
    const gchar *objectPath,
    GVariant *identityData);

void sso_auth_service_complete_query_methods (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *authMethods);

void sso_auth_service_complete_query_mechanisms (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *mechanisms);

void sso_auth_service_complete_query_identities (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation,
    GVariant *identities);

void sso_auth_service_complete_clear (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation,
    gboolean unnamed_arg0);

void sso_auth_service_complete_backup_starts (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation,
    guchar unnamed_arg0);

void sso_auth_service_complete_backup_finished (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation,
    guchar unnamed_arg0);

void sso_auth_service_complete_restore_starts (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation,
    guchar unnamed_arg0);

void sso_auth_service_complete_restore_finished (
    SsoAuthService *object,
    GDBusMethodInvocation *invocation,
    guchar unnamed_arg0);



/* D-Bus method calls: */
void sso_auth_service_call_register_new_identity (
    SsoAuthService *proxy,
    const gchar *arg_applicationContext,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sso_auth_service_call_register_new_identity_finish (
    SsoAuthService *proxy,
    gchar **out_objectPath,
    GAsyncResult *res,
    GError **error);

gboolean sso_auth_service_call_register_new_identity_sync (
    SsoAuthService *proxy,
    const gchar *arg_applicationContext,
    gchar **out_objectPath,
    GCancellable *cancellable,
    GError **error);

void sso_auth_service_call_get_identity (
    SsoAuthService *proxy,
    guint arg_id,
    const gchar *arg_applicationContext,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sso_auth_service_call_get_identity_finish (
    SsoAuthService *proxy,
    gchar **out_objectPath,
    GVariant **out_identityData,
    GAsyncResult *res,
    GError **error);

gboolean sso_auth_service_call_get_identity_sync (
    SsoAuthService *proxy,
    guint arg_id,
    const gchar *arg_applicationContext,
    gchar **out_objectPath,
    GVariant **out_identityData,
    GCancellable *cancellable,
    GError **error);

void sso_auth_service_call_query_methods (
    SsoAuthService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sso_auth_service_call_query_methods_finish (
    SsoAuthService *proxy,
    gchar ***out_authMethods,
    GAsyncResult *res,
    GError **error);

gboolean sso_auth_service_call_query_methods_sync (
    SsoAuthService *proxy,
    gchar ***out_authMethods,
    GCancellable *cancellable,
    GError **error);

void sso_auth_service_call_query_mechanisms (
    SsoAuthService *proxy,
    const gchar *arg_method,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sso_auth_service_call_query_mechanisms_finish (
    SsoAuthService *proxy,
    gchar ***out_mechanisms,
    GAsyncResult *res,
    GError **error);

gboolean sso_auth_service_call_query_mechanisms_sync (
    SsoAuthService *proxy,
    const gchar *arg_method,
    gchar ***out_mechanisms,
    GCancellable *cancellable,
    GError **error);

void sso_auth_service_call_query_identities (
    SsoAuthService *proxy,
    GVariant *arg_filter,
    const gchar *arg_applicationContext,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sso_auth_service_call_query_identities_finish (
    SsoAuthService *proxy,
    GVariant **out_identities,
    GAsyncResult *res,
    GError **error);

gboolean sso_auth_service_call_query_identities_sync (
    SsoAuthService *proxy,
    GVariant *arg_filter,
    const gchar *arg_applicationContext,
    GVariant **out_identities,
    GCancellable *cancellable,
    GError **error);

void sso_auth_service_call_clear (
    SsoAuthService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sso_auth_service_call_clear_finish (
    SsoAuthService *proxy,
    gboolean *out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean sso_auth_service_call_clear_sync (
    SsoAuthService *proxy,
    gboolean *out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void sso_auth_service_call_backup_starts (
    SsoAuthService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sso_auth_service_call_backup_starts_finish (
    SsoAuthService *proxy,
    guchar *out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean sso_auth_service_call_backup_starts_sync (
    SsoAuthService *proxy,
    guchar *out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void sso_auth_service_call_backup_finished (
    SsoAuthService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sso_auth_service_call_backup_finished_finish (
    SsoAuthService *proxy,
    guchar *out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean sso_auth_service_call_backup_finished_sync (
    SsoAuthService *proxy,
    guchar *out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void sso_auth_service_call_restore_starts (
    SsoAuthService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sso_auth_service_call_restore_starts_finish (
    SsoAuthService *proxy,
    guchar *out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean sso_auth_service_call_restore_starts_sync (
    SsoAuthService *proxy,
    guchar *out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void sso_auth_service_call_restore_finished (
    SsoAuthService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sso_auth_service_call_restore_finished_finish (
    SsoAuthService *proxy,
    guchar *out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean sso_auth_service_call_restore_finished_sync (
    SsoAuthService *proxy,
    guchar *out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_SSO_AUTH_SERVICE_PROXY (sso_auth_service_proxy_get_type ())
#define SSO_AUTH_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SSO_AUTH_SERVICE_PROXY, SsoAuthServiceProxy))
#define SSO_AUTH_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SSO_AUTH_SERVICE_PROXY, SsoAuthServiceProxyClass))
#define SSO_AUTH_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SSO_AUTH_SERVICE_PROXY, SsoAuthServiceProxyClass))
#define IS_SSO_AUTH_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SSO_AUTH_SERVICE_PROXY))
#define IS_SSO_AUTH_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SSO_AUTH_SERVICE_PROXY))

typedef struct _SsoAuthServiceProxy SsoAuthServiceProxy;
typedef struct _SsoAuthServiceProxyClass SsoAuthServiceProxyClass;
typedef struct _SsoAuthServiceProxyPrivate SsoAuthServiceProxyPrivate;

struct _SsoAuthServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  SsoAuthServiceProxyPrivate *priv;
};

struct _SsoAuthServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType sso_auth_service_proxy_get_type (void) G_GNUC_CONST;

void sso_auth_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
SsoAuthService *sso_auth_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
SsoAuthService *sso_auth_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void sso_auth_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
SsoAuthService *sso_auth_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
SsoAuthService *sso_auth_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_SSO_AUTH_SERVICE_SKELETON (sso_auth_service_skeleton_get_type ())
#define SSO_AUTH_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SSO_AUTH_SERVICE_SKELETON, SsoAuthServiceSkeleton))
#define SSO_AUTH_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SSO_AUTH_SERVICE_SKELETON, SsoAuthServiceSkeletonClass))
#define SSO_AUTH_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SSO_AUTH_SERVICE_SKELETON, SsoAuthServiceSkeletonClass))
#define IS_SSO_AUTH_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SSO_AUTH_SERVICE_SKELETON))
#define IS_SSO_AUTH_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SSO_AUTH_SERVICE_SKELETON))

typedef struct _SsoAuthServiceSkeleton SsoAuthServiceSkeleton;
typedef struct _SsoAuthServiceSkeletonClass SsoAuthServiceSkeletonClass;
typedef struct _SsoAuthServiceSkeletonPrivate SsoAuthServiceSkeletonPrivate;

struct _SsoAuthServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  SsoAuthServiceSkeletonPrivate *priv;
};

struct _SsoAuthServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType sso_auth_service_skeleton_get_type (void) G_GNUC_CONST;

SsoAuthService *sso_auth_service_skeleton_new (void);


G_END_DECLS

#endif /* __SSO_AUTH_SERVICE_GEN_H__ */
