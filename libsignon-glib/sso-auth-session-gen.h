/*
 * Generated by gdbus-codegen 2.32.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __SSO_AUTH_SESSION_GEN_H__
#define __SSO_AUTH_SESSION_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.google.code.AccountsSSO.gSingleSignOn.AuthSession */

#define TYPE_SSO_AUTH_SESSION (sso_auth_session_get_type ())
#define SSO_AUTH_SESSION(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SSO_AUTH_SESSION, SsoAuthSession))
#define IS_SSO_AUTH_SESSION(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SSO_AUTH_SESSION))
#define SSO_AUTH_SESSION_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_SSO_AUTH_SESSION, SsoAuthSessionIface))

struct _SsoAuthSession;
typedef struct _SsoAuthSession SsoAuthSession;
typedef struct _SsoAuthSessionIface SsoAuthSessionIface;

struct _SsoAuthSessionIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_cancel) (
    SsoAuthSession *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_process) (
    SsoAuthSession *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_sessionDataVa,
    const gchar *arg_mechanism);

  gboolean (*handle_query_available_mechanisms) (
    SsoAuthSession *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_wantedMechanisms);

  void (*state_changed) (
    SsoAuthSession *object,
    gint arg_state,
    const gchar *arg_message);

  void (*unregistered) (
    SsoAuthSession *object);

};

GType sso_auth_session_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *sso_auth_session_interface_info (void);
guint sso_auth_session_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void sso_auth_session_complete_query_available_mechanisms (
    SsoAuthSession *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *unnamed_arg1);

void sso_auth_session_complete_process (
    SsoAuthSession *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg2);

void sso_auth_session_complete_cancel (
    SsoAuthSession *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void sso_auth_session_emit_state_changed (
    SsoAuthSession *object,
    gint arg_state,
    const gchar *arg_message);

void sso_auth_session_emit_unregistered (
    SsoAuthSession *object);



/* D-Bus method calls: */
void sso_auth_session_call_query_available_mechanisms (
    SsoAuthSession *proxy,
    const gchar *const *arg_wantedMechanisms,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sso_auth_session_call_query_available_mechanisms_finish (
    SsoAuthSession *proxy,
    gchar ***out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean sso_auth_session_call_query_available_mechanisms_sync (
    SsoAuthSession *proxy,
    const gchar *const *arg_wantedMechanisms,
    gchar ***out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void sso_auth_session_call_process (
    SsoAuthSession *proxy,
    GVariant *arg_sessionDataVa,
    const gchar *arg_mechanism,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sso_auth_session_call_process_finish (
    SsoAuthSession *proxy,
    GVariant **out_unnamed_arg2,
    GAsyncResult *res,
    GError **error);

gboolean sso_auth_session_call_process_sync (
    SsoAuthSession *proxy,
    GVariant *arg_sessionDataVa,
    const gchar *arg_mechanism,
    GVariant **out_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void sso_auth_session_call_cancel (
    SsoAuthSession *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean sso_auth_session_call_cancel_finish (
    SsoAuthSession *proxy,
    GAsyncResult *res,
    GError **error);

gboolean sso_auth_session_call_cancel_sync (
    SsoAuthSession *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_SSO_AUTH_SESSION_PROXY (sso_auth_session_proxy_get_type ())
#define SSO_AUTH_SESSION_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SSO_AUTH_SESSION_PROXY, SsoAuthSessionProxy))
#define SSO_AUTH_SESSION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SSO_AUTH_SESSION_PROXY, SsoAuthSessionProxyClass))
#define SSO_AUTH_SESSION_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SSO_AUTH_SESSION_PROXY, SsoAuthSessionProxyClass))
#define IS_SSO_AUTH_SESSION_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SSO_AUTH_SESSION_PROXY))
#define IS_SSO_AUTH_SESSION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SSO_AUTH_SESSION_PROXY))

typedef struct _SsoAuthSessionProxy SsoAuthSessionProxy;
typedef struct _SsoAuthSessionProxyClass SsoAuthSessionProxyClass;
typedef struct _SsoAuthSessionProxyPrivate SsoAuthSessionProxyPrivate;

struct _SsoAuthSessionProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  SsoAuthSessionProxyPrivate *priv;
};

struct _SsoAuthSessionProxyClass
{
  GDBusProxyClass parent_class;
};

GType sso_auth_session_proxy_get_type (void) G_GNUC_CONST;

void sso_auth_session_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
SsoAuthSession *sso_auth_session_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
SsoAuthSession *sso_auth_session_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void sso_auth_session_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
SsoAuthSession *sso_auth_session_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
SsoAuthSession *sso_auth_session_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_SSO_AUTH_SESSION_SKELETON (sso_auth_session_skeleton_get_type ())
#define SSO_AUTH_SESSION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SSO_AUTH_SESSION_SKELETON, SsoAuthSessionSkeleton))
#define SSO_AUTH_SESSION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SSO_AUTH_SESSION_SKELETON, SsoAuthSessionSkeletonClass))
#define SSO_AUTH_SESSION_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SSO_AUTH_SESSION_SKELETON, SsoAuthSessionSkeletonClass))
#define IS_SSO_AUTH_SESSION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SSO_AUTH_SESSION_SKELETON))
#define IS_SSO_AUTH_SESSION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SSO_AUTH_SESSION_SKELETON))

typedef struct _SsoAuthSessionSkeleton SsoAuthSessionSkeleton;
typedef struct _SsoAuthSessionSkeletonClass SsoAuthSessionSkeletonClass;
typedef struct _SsoAuthSessionSkeletonPrivate SsoAuthSessionSkeletonPrivate;

struct _SsoAuthSessionSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  SsoAuthSessionSkeletonPrivate *priv;
};

struct _SsoAuthSessionSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType sso_auth_session_skeleton_get_type (void) G_GNUC_CONST;

SsoAuthSession *sso_auth_session_skeleton_new (void);


G_END_DECLS

#endif /* __SSO_AUTH_SESSION_GEN_H__ */
